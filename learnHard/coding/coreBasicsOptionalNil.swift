
//###################################################################################################
//Optional
//Каждый базовый тип имеет опциональный тип
//Синтаксис 2 варианта 1) Int? 2) Optional<Int>
//Опциональный тип может иметь значение nil
//Достать значение из опционального типа можно через знак ( forced unwrap operator) !
//Ошибка если достаём значение из опционального типа с nil

var valOpt : Int? = Int("123")
var valOptOld : Optional<Int> = Int("456")
var valOptNil : Int? = nil
print(valOpt)
print(valOptOld)
print(valOptNil)

print(valOpt!)
print(valOptOld!)
//print(valOptNil!) //crash

//###################################################################################################
//Неявное получение значений из Optional
// Implicity unwrapped operator
var b: Int = 10
var a: Int! = Int("123")
b = a + b
print(a)    // 123
print(b)    // 133

//###################################################################################################
//Проверка Optional на nil
//
/* 
if var переменная | let константа = опциональное_значение {
    действия1
} else {
    действия2
} 
*/
//Если опциональное_значение не равно nil, то оно присваивается создаваемой переменной (или константе), и выполняются действия1. Иначе выполняются действия2.

var str: String = "123"
var b1: Int = 10
if var a1 = Int(str){
    a1+=b1
    print(a1)
}
else{
    print(b1)
}
//Если выражение Int(str) (которое возвращает объект Int?) успешно преобразует строку в число, то есть будет иметь значение, то создается переменная a, которой присваивается полученное значение, и затем выполняется код:
//Но также в данном случае мы могли и по другому проверить на значение nil:

var b2: Int = 10
var a2: Int? = Int(str)
if a2 != nil {
    a+=b
    print(a2)
}
else{
    print(b2)
}
//Если надо проверить значения нескольких переменных или констант, то все их можно указать в одном выражении if:

let a3 = Int("123")
let b3 = Int("456")
if let aVal = a3, let bVal = b3{
    print(aVal)
    print(bVal)
}
else{
    print("Error")
}

//###################################################################################################
//Сравнение объектов Optional
let a4: Int? = 10
if a4 == 10{
    print("a is equal to 10")
}
else{
    print("a is not equal to 10")
}
//И таким образом работают операции == и !=. Однако с операциями <, >, <=, >= все будет несколько иначе. 
//Например, следующий код выдаст ошибку:

/* 
let a: Int? = 10
if a > 5{
    print("a is greater than 5")
} 
*/
//И в подобных операциях к объекту Optional необходимо применить оператор !:

let a5: Int? = 10
if a5 != nil && a! > 5{
    print("a is greater than 5")
}

//###################################################################################################
//Optional в switch..case
let i = Int("1")
switch i {
case 1?:
    print("i is equal to 1")
case let n?:
    print("i is equal to \(n)")
case nil:
    print("i is undefined")
}

//###################################################################################################
//nil объеденения
//??
var strVal: String = "123"
var strValCast = Int(strVal) // если возможно кастануть и не получить nil то выведет 123 иначе 10
print(strValCast ?? 10)