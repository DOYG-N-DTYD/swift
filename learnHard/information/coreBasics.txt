oh shit here we go again

###################################################################################################

var - "value can be changed"
let - "constant value, after init can't be changed"

var [name] : [type] = [value]
let [name] : [type] = [value]

var valHeight, valWeight : double   "few same type variable"

var valHeight : double
valHeight = 14.3

implicit typing(неявная типизация)
var valHeight = 3.4 "type of valHeight is double now"

###################################################################################################

все целочисленные литералы рассматриваются как значения типа Int, а все дробные литералы - как значения типа Double.
let a = 2   // Int
let b = 2.0 // Double
Если мы хотим присвоить числовой литерал переменным или константам типов, отличных от Int и Double, то компилятор может автоматически выполнять преобразование:
let n : Int16 = 10  // неявное преобразование от Int к Int16
let x : Float = 3.14 // неявное преобразование от Double к Float

var age: UInt8 = 1000 //здесь ошибка 8bit -> 2^8 -> 255 max value for UInt8)


десятичная: числа используются так, как они есть, без каких-либо префиксов
двоичная: перед числом используется префикс 0b
восьмеричная: перед числом используется префикс 0o
шестнадцатеричная: перед числом используется префикс 0x

Например, запишем число 10 во всех системах исчисления:
let decimalInt = 10
let binaryInt = 0b1010      // 10 в двоичной системе
let octalInt = 0o12         // 10 в восьмеричной системе
let hexInt = 0xA            // 10 в шестнадцатеричной системе

Для чисел с плавающей точкой возможна запись в двух системах: десятичной и шестнадцатеричной. Для упрощении записи длинных чисел в десятичной системе мы можем использовать символ e (экспонента). Например:	
var a = 1.25e2      // 125
var b = 1.25e-2     // 0.0125
Для записи чисел с плавающей точкой в шестнадцатеричной системе используется префикс p:
var a = 0xFp2   //15 * 2 в степени 2 или 60.0
var b = 0xFp-2  //15 * 2 в степени -2  или 3.75


функции-инициализаторы типов данных
Int8(), Int(), Float(), Double() и т.д.

Для операции над константами или переменными надо кастовать тип иначе ошибка !!!
лучше на дробный если происходит следующее
let dataDouble : Double = 3.1
let dataInt : Int = 10
print(Double(dataInt) / dataDouble)


###################################################################################################
операции как и в С
+ - / % *
поразрядные 
and &
or |
xor ^
not ~
сдвиг поразрядный >> , <<


###################################################################################################
Типы Character и String

    \n: перевод на новую строку
    \t: табуляция
    \": кавычка
    \\: обратный слеш

вывод из строки double значения в double 
var stringData : Double 
stringData = Double("3.14") ?? 0    // если Double("3.14") nil то берём 0 
print(stringData)


###################################################################################################
Bool
==
>
<
!=
!
&&
||
>=
<=


###################################################################################################
Кортежи / Tuples
инициализация
var tupleName1 = (true, "string", 88) // неявно
var tupleName2 : (Bool, String, Int) = (true, "string", 88) // явно

из tuple можно сразу присвоить значения переменныи или константам
var userInfo: (Bool, Int, String) = (true, 34, "Tom")
let(isMarried, age, name) = userInfo

если не нужны все значения то _
var userInfo: (boolVal:Bool, Int, String) = (true, 34, "Tom") //  можно обращатсья не только по индексам от 0 но и по именам -> boolVal
let(_, age, name) = userInfo
print(userInfo.boolVal)


###################################################################################################
if(true){

} else if (false) {

} else {
    
}

print(2 > 3 ? 6 : 7) // тернарный оператор
if( 2 > 3 ) {
    print(6)
}else {
    print(7)
}

###################################################################################################
Switch